@page "/"

<PageTitle>Home</PageTitle>

<MudText><h1>Welcome to PWM9</h1></MudText>

<AuthorizeView>
    <NotAuthorized>
        Please login to access your stored passwords.
    </NotAuthorized>
    <Authorized>
        <!--// TODO Ensure filter function correctly filters the list-->
        <MudTextField T="string" Label="Search" @bind-Value="@_searchText" @onblur="() => FilterEntries()"></MudTextField>
        @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@SearchClicked">Search</MudButton> *@

        <MudList>
            @foreach (var entry in _entries)
            {
                <MudListItem>
                    <MudStack>
                        <MudButton OnClick="@((e) => OpenDialog(entry))" Color="Color.Primary">@entry.Name</MudButton>
                        <MudText Align="Align.Center">@entry.Url</MudText>
                    </MudStack>
                </MudListItem>
            }
        </MudList>

        <MudText>More text here!</MudText>

        <MudPaper>
            <MudText Typo="Typo.h6">This is a simple example of a MudBlazor app.</MudText>
        </MudPaper>

        <MudElement>
            Some more stuff.
        </MudElement>
    </Authorized>
</AuthorizeView>

@code {
    private string _searchText = string.Empty;
    private static List<PasswordEntry> _entries = GetHardcodedEntries("original");
    private List<PasswordEntry> _filteredEntries = new List<PasswordEntry>(_entries); //GetHardcodedEntries("orignial");

    // DialogOptions noHeader = new DialogOptions() { NoHeader = true };
    // DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    // DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };
    // DialogOptions topCenter = new DialogOptions() { Position = DialogPosition.TopCenter };

    private async Task OpenDialog(PasswordEntry entry)
    {
        var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
        var parameters = new DialogParameters<PasswordEntry>{{ "Entry", (object)entry }};

        var dialog = await Dialog.ShowAsync<PasswordEntryDialog>("Password", parameters, options);
        var result = await dialog.Result; // GetReturnValueAsync<PasswordEntry>();
                                          // entry = result; // in my mind this inserts the object back into the list of entries, but needs testing

        if (!result.Canceled)
        {
            // await fetch new data from the database here and update the list of entries
            // _entries = await PasswordService.GetEntriesFromDatabase(userid);

            _entries = GetHardcodedEntries("updated"); // await PasswordService.GetEntriesFromDatabase(userid);
            StateHasChanged(); // the database should be updated here from the dialog so we have one point of truth
        } 
        // Else the dialog was canceled

        // this is where we should update the database with the new entry
        // we should have an update method which should pass the updated entry back to the parent component
    }

    // method to get the hardcoded entries to simulate a database
    private static List<PasswordEntry> GetHardcodedEntries(string uniqueness)
    {
        var entries = new List<PasswordEntry>();

        for (int i = 1; i <= 20; i++)
        {
            entries.Add(new PasswordEntry
                {
                    EntryId = i,
                    UserId = 1,
                    Url = $"https://{uniqueness}.com/{i}",
                    Name = $"{uniqueness}Example {i}",
                    Note = $"This is an {uniqueness}example note for entry {i}.",
                    Username = $"user{i}{uniqueness}",
                    Password = $"password{i}{uniqueness}",
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now
                });
        }
        return entries;
    }

    private void FilterEntries()
    {
        var searchText = _searchText.ToLower().Trim();
        if (string.IsNullOrWhiteSpace(searchText))
        {
            _filteredEntries = _entries;
        }
        else
        {
            _filteredEntries = _entries.Where(entry =>
                //entry.EntryId.ToString().Contains(searchText) ||
                //entry.UserId.ToString().Contains(searchText) ||
                entry.Url!.ToLower().Contains(searchText) ||
                entry.Name!.ToLower().Contains(searchText) // ||
                //entry.Note!.ToLower().Contains(searchText) ||
                //entry.Username!.ToLower().Contains(searchText) ||
                //entry.Password!.ToLower().Contains(searchText) ||
                //entry.CreatedAt.ToString().Contains(searchText) ||
                //entry.UpdatedAt.ToString().Contains(searchText)
            ).ToList();
        }
    }
}