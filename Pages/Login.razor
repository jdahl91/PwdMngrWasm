@page "/login"

<div class="container-fluid flex-center">
    <div>
        <h2>Login</h2>
        <EditForm Model="@LoginForm" OnValidSubmit="LoginClicked">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="form-label">Email Address</label>
                <InputText @bind-Value="LoginForm.Email" class="form-control"></InputText>
            </div>
            <div class="form-group mt-3">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="LoginForm.Password" class="form-control"></InputText>
            </div>
            <div class="form-group mt-3">
                <button class="btn btn-primary" type="submit">Login</button>
            </div>
            <ValidationSummary />
        </EditForm>
    </div>
</div>

@code {
    [Inject]
    #pragma warning disable CS8618
    public AuthenticationStateProvider authenticationStateProvider { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public AuthenticationService authenticationService { get; set; }
    #pragma warning restore CS8618
    public LoginDTO LoginForm = new();

    async Task LoginClicked()
    {
        // LoginResponse response = await AccountService.LoginAsync(Login);
        // if (!response.Flag)
        // {
        //     await JS.InvokeVoidAsync("alert", response.Message);
        //     Login = new();
        //     return;
        // }
        var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;

        // TODO : Implement the login logic here
        var loginResponse = await authenticationService.Login(LoginForm);
        var jwt = loginResponse.JwtToken;
        var refreshToken = loginResponse.RefreshToken;

        // await customAuthenticationStateProvider.MarkUserAsAuthenticated(jwt, refreshToken);
        // TODO?
        // NEED TO HANDLE THE REFRESH TOKEN maybe done above

        // JWT Hardcoded for testing
        await customAuthenticationStateProvider.MarkUserAsAuthenticated("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJOYW1lIjoiSm9ha2ltIiwiRW1haWwiOiJqb2FraW1kYWhsQGdteC51cyIsIlJvbGUiOiJBZG1pbiJ9.xwehf7zL11t0lHZhSynNmeQsYZghMdDFoAWNPrYcfhM", "refresh-token-test");

        NavigationManager.NavigateTo("/", forceLoad: false);
    }
}